openapi: 3.0.1
info:
  title: Movie App API Documentation
  version: v1
servers:
- url: http://localhost:8080
  description: 
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - "User Controller"
      description: Get user by id.
      summary: Get user by id.
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    put:
      tags:
      - "User Controller"
      description: Update user by id.
      summary: Update user by id.
      operationId: updateUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    delete:
      tags:
      - "User Controller"
      description: Delete user by id.
      summary: Delete user by id.
      operationId: deleteUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/v1/reviews/{id}:
    get:
      tags:
      - "Review Controller"
      description: Get review by id.
      summary: Get review by id.
      operationId: getReviewById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewDTO"
    put:
      tags:
      - "Review Controller"
      description: Update review by id.
      summary: Update review by id.
      operationId: updateReviewById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdateDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewDTO"
    delete:
      tags:
      - "Review Controller"
      description: Delete review by id.
      summary: Delete review by id.
      operationId: deleteReviewById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/v1/movieList/{movieListId}/movies/{movieId}:
    put:
      tags:
      - "MovieList Controller"
      description: Add movie to movie list.
      summary: Add movie to movie list.
      operationId: addMovieToListById
      parameters:
      - name: movieListId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: movieId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieListDTO"
    delete:
      tags:
      - "MovieList Controller"
      description: Delete movie from movie list.
      summary: Delete movie from movie list.
      operationId: deleteMovieFromListById
      parameters:
      - name: movieListId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: movieId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieListDTO"
  /api/v1/movieList/{id}:
    get:
      tags:
      - "MovieList Controller"
      description: Get movie list by id.
      summary: Get movie list by id.
      operationId: getMovieListById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieListDTO"
    put:
      tags:
      - "MovieList Controller"
      description: Update movie list by id.
      summary: Update movie list by id.
      operationId: updateMovieListById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieListInputDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieListDTO"
    delete:
      tags:
      - "MovieList Controller"
      description: Delete movie list by id.
      summary: Delete movie list by id.
      operationId: deleteMovieListById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/v1/users/register:
    post:
      tags:
      - "User Controller"
      description: Register user (ROLE_ADMIN only).
      summary: Register user (ROLE_ADMIN only).
      operationId: createUser
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInputDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/v1/reviews:
    get:
      tags:
      - "Review Controller"
      description: Get all reviews (ROLE_ADMIN only).
      summary: Get all reviews (ROLE_ADMIN only).
      operationId: getAllReviews
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewDTO"
    post:
      tags:
      - "Review Controller"
      description: Create review.
      summary: Create review.
      operationId: createReview
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewInputDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewDTO"
  /api/v1/movieList:
    get:
      tags:
      - "MovieList Controller"
      description: Get all movie lists  (ROLE_ADMIN only).
      summary: Get all movie lists  (ROLE_ADMIN only).
      operationId: getAllMovieLists
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MovieListDTO"
    post:
      tags:
      - "MovieList Controller"
      description: Create movie list.
      summary: Create movie list.
      operationId: createMovieList
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieListInputDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieListDTO"
  /api/v1/auth/generateToken:
    post:
      tags:
      - "Authentication Controller"
      description: Generate API token based on user details (no token required).
      summary: Generate API token based on user details (no token required).
      operationId: authenticateAndGetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequestDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtDTO"
  /api/v1/users:
    get:
      tags:
      - "User Controller"
      description: Get all users (ROLE_ADMIN only).
      summary: Get all users (ROLE_ADMIN only).
      operationId: getAllUsers
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
  /api/v1/searchIndex:
    get:
      tags:
      - "SearchIndex Controller"
      description: Get search index.
      summary: Get search index.
      operationId: getSearchIndex
      parameters:
      - name: keyword
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MovieDTO"
  /api/v1/reviews/users/{userId}:
    get:
      tags:
      - "Review Controller"
      description: Get all reviews for specific user.
      summary: Get all reviews for specific user.
      operationId: getAllReviewsForUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewDTO"
  /api/v1/reviews/movies/{movieId}:
    get:
      tags:
      - "Review Controller"
      description: Get all reviews for specific movie.
      summary: Get all reviews for specific movie.
      operationId: getAllReviewsForMovie
      parameters:
      - name: movieId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewDTO"
  /api/v1/movieList/users/{userId}:
    get:
      tags:
      - "MovieList Controller"
      description: Get all movie lists for specific user.
      summary: Get all movie lists for specific user.
      operationId: getAllMovieListsForUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MovieListDTO"
  /api/v1/movie/{id}:
    get:
      tags:
      - "Movie Controller"
      description: Get movie by id.
      summary: Get movie by id.
      operationId: getMovieById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MovieDTO"
components:
  schemas:
    UserInputDTO:
      type: object
      properties:
        name:
          maxLength: 30
          minLength: 3
          type: string
        email:
          maxLength: 30
          minLength: 3
          type: string
        password:
          maxLength: 30
          minLength: 3
          type: string
        role:
          type: string
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        movieId:
          type: integer
          format: int64
        searchIndex:
          $ref: "#/components/schemas/SearchIndex"
        movieLists:
          type: array
          items:
            $ref: "#/components/schemas/MovieList"
        reviewList:
          type: array
          items:
            $ref: "#/components/schemas/Review"
    MovieList:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        creationDate:
          type: string
          format: date
        creationTime:
          $ref: "#/components/schemas/LocalTime"
        description:
          type: string
        movies:
          type: array
          items:
            $ref: "#/components/schemas/Movie"
        userMovieList:
          $ref: "#/components/schemas/User"
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reviewText:
          type: string
        creationDate:
          type: string
          format: date
        creationTime:
          $ref: "#/components/schemas/LocalTime"
        reviewUser:
          $ref: "#/components/schemas/User"
        reviewMovie:
          $ref: "#/components/schemas/Movie"
    SearchIndex:
      type: object
      properties:
        id:
          type: integer
          format: int64
        creationDate:
          type: string
          format: date
        creationTime:
          $ref: "#/components/schemas/LocalTime"
        search:
          type: integer
          format: int32
        keyword:
          type: string
        movieList:
          type: array
          items:
            $ref: "#/components/schemas/Movie"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
        creationDate:
          type: string
          format: date
        creationTime:
          $ref: "#/components/schemas/LocalTime"
        role:
          type: string
          enum:
          - ROLE_ADMIN
          - ROLE_USER
        reviewList:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        listMovieList:
          type: array
          items:
            $ref: "#/components/schemas/MovieList"
    UserDTO:
      required:
      - email
      - name
      - password
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 30
          minLength: 3
          type: string
        email:
          maxLength: 30
          minLength: 3
          type: string
        password:
          maxLength: 30
          minLength: 3
          type: string
        creationDate:
          type: string
          format: date
        creationTime:
          $ref: "#/components/schemas/LocalTime"
        role:
          type: string
        reviewList:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        listMovieList:
          type: array
          items:
            $ref: "#/components/schemas/MovieList"
    ReviewUpdateDTO:
      required:
      - reviewText
      type: object
      properties:
        reviewText:
          type: string
    ReviewDTO:
      required:
      - reviewText
      type: object
      properties:
        id:
          type: integer
          format: int64
        reviewText:
          type: string
        creationDate:
          type: string
          format: date
        creationTime:
          $ref: "#/components/schemas/LocalTime"
        userReview:
          $ref: "#/components/schemas/User"
        reviewMovie:
          $ref: "#/components/schemas/Movie"
    MovieListDTO:
      required:
      - description
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          format: date
        time:
          $ref: "#/components/schemas/LocalTime"
        description:
          type: string
        movies:
          type: array
          items:
            $ref: "#/components/schemas/Movie"
        userMovie:
          $ref: "#/components/schemas/User"
    MovieListInputDTO:
      required:
      - description
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ReviewInputDTO:
      required:
      - movieId
      - reviewText
      type: object
      properties:
        reviewText:
          type: string
        movieId:
          type: integer
          format: int64
    AuthRequestDTO:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    JwtDTO:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
    MovieDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        overview:
          type: string
        posterPath:
          type: string
        movieId:
          type: integer
          format: int64
        movieLists:
          type: array
          items:
            $ref: "#/components/schemas/MovieList"
